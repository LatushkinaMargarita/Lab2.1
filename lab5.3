#include <iostream>
#include <stack>
using namespace std;
stack <double> s;
stack <char> op;
char str[100];
bool is_op(char c)
{
	return c == '*' || c == '/' || c == '+' || c == '-';
}
int priority(char op)
{
	if (op == '+' || op == '-')
		return 1;
	if (op == '*' || op == '/')
		return 2;
	return -100000;
}
double operation(double x, double y, char z)
{
	if (z == '+')
	{
		return x + y;
	}
	if (z == '*')
	{
		return x*y;
	}
	if (z == '-')
	{
		return x - y;
	}
	if (z == '/')
	{
		return x/y;
	}
}
void func()
{
	if (!s.empty())
	{
		s.pop();
	}
	char str1[100];
	double pr[100];
	double number=0, k = 0,d=0;
	char m;
	for (int i = 0; i < strlen(str); i++)
	{
		double x = 0, y = 0, z = 0;
		double result = 0.0;
		if (str[i] >= '0' && str[i] <= '9')
		{
			while (str[i]>='0' && str[i]<='9')
			{
				number =  number *10 + str[i]-'0';
				i++;
			}
			s.push(number);
			if (str[0] == '-')
			{
				k++;
				if (k == 1)
				{
					s.pop();
					number *= -1.0;
					s.push(number);
				}
			}
		}
		if (str[i] == '-' && (str[i - 1] == '('))
		{
			op.pop();
			i++;
			while (str[i] >= '0' && str[i] <= '9')
			{
				number = number * 10 + str[i] - '0';
				i++;
			}
			number *= -1;
			s.push(number);
			i++;
		}
		number = 0;
		if (is_op(str[i]))
		{
			while (!op.empty() && (priority(str[i]) <= priority(op.top())))
			{
				x = s.top();
				s.pop();
				y = s.top();
				s.pop();
				z = op.top();
				op.pop();
				result = operation(y, x, z);
				s.push(result);
			}
			op.push(str[i]);
		if (str[0] == '-')
		{
			d++;
			if (d == 1)
			{
				op.pop();
			}
		}
		}
		else
		{
			if (str[i] == '(')
			{
				op.push(str[i]);
			}
			else
			{
				if (str[i] == ')')
				{
					while ((m = op.top()) != '(')
					{
						x = s.top();
						s.pop();
						y = s.top();
						s.pop();
						z = op.top();
						op.pop();
						result = operation(y, x, z);
						s.push(result);
					}
					op.pop();
				}
			}
		}
	}
	while (!op.empty())
	{
		double x = 0, y = 0, z = 0;
		double result = 0.0;
		x = s.top();
		s.pop();
		y = s.top() ;
		s.pop();
		z = op.top();
		op.pop();
		result = operation(y, x, z);
		s.push(result);
	}
}
int main()
{
	cin >> str;
	func();
	cout << s.top() << endl;
	cin >> str;
	func();
	cout << s.top() << endl;
	system("pause");
}
